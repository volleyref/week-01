.....F*.............FFFFF.........F..F....................FFF......F

Pending:
  The Rspec ruby gem Domain Specific Language supports placeholder examples that lack code (like this one)
    # Not Yet Implemented
    # ./spec/00_rspec_spec.rb:49

Failures:

  1) The Rspec ruby gem Domain Specific Language alerts you when examples fail
     Failure/Error: 1.should eq 2
       
       expected 2
            got 1
       
       (compared using ==)
     # ./spec/00_rspec_spec.rb:45:in `block (3 levels) in <top (required)>'

  2) Variable when adding should be equal to the sum
     Failure/Error: (first + second).should eq 3
       
       expected 3
            got 2
       
       (compared using ==)
     # ./spec/01_assignment_spec.rb:127:in `block (3 levels) in <top (required)>'

  3) Variable when dividing/'modulosing' should be equal to the dividend
     Failure/Error: (12 / 3).should eq 3
       
       expected 3
            got 4
       
       (compared using ==)
     # ./spec/01_assignment_spec.rb:137:in `block (3 levels) in <top (required)>'

  4) Variable when dividing/'modulosing' should be equal to the the remainder
     Failure/Error: (100 % 3).should eq 33
       
       expected 33
            got 1
       
       (compared using ==)
     # ./spec/01_assignment_spec.rb:143:in `block (3 levels) in <top (required)>'

  5) Variable when dividing/'modulosing' should return an integer when using two integers
     Failure/Error: (4 / 3).should eq 1.3
       
       expected 1.3
            got 1
       
       (compared using ==)
     # ./spec/01_assignment_spec.rb:152:in `block (3 levels) in <top (required)>'

  6) Variable when dividing/'modulosing' should return a float when at least one number is a float
     Failure/Error: (numerator / divisor).should eq 1
       
       expected 1
            got 1.3333333333333333
       
       (compared using ==)
     # ./spec/01_assignment_spec.rb:165:in `block (3 levels) in <top (required)>'

  7) Boolean failing tests true should be true
     Failure/Error: true.should eq "true"
       
       expected "true"
            got true
       
       (compared using ==)
       
       Diff:
     # ./spec/03_boolean_spec.rb:92:in `block (3 levels) in <top (required)>'

  8) Nil and the NilClass faiing tests should be nil
     Failure/Error: value.should be_nil
     NameError:
       undefined local variable or method `value' for #<RSpec::Core::ExampleGroup::Nested_5::Nested_2:0x000001011c6540>
     # ./spec/04_nil_spec.rb:29:in `block (3 levels) in <top (required)>'

  9) Strings failing tests should insert the value into the string
     Failure/Error: 'My name is #{name}'.should eq 'My name is Old Gregg'
       
       expected "My name is Old Gregg"
            got "My name is \#{name}"
       
       (compared using ==)
     # ./spec/05_strings_spec.rb:173:in `block (3 levels) in <top (required)>'

  10) Strings failing tests should perform calculations within the area escaped within the String
     Failure/Error: "#{1 + 1}".should eq '1 + 1'
       
       expected "1 + 1"
            got "2"
       
       (compared using ==)
     # ./spec/05_strings_spec.rb:179:in `block (3 levels) in <top (required)>'

  11) Strings failing tests should be equal to each other
     Failure/Error: "\nDo you like Bailey's".should eq '\nDo you like Bailey\'s'
       
       expected "\\nDo you like Bailey's"
            got "\nDo you like Bailey's"
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -\nDo you like Bailey's
       +
       +Do you like Bailey's
     # ./spec/05_strings_spec.rb:185:in `block (3 levels) in <top (required)>'

  12) Symbols not quite a string, not yet a constant failing tests when I call to_s or place it in a String on the Symbol should be equal to a string
     Failure/Error: artist.should == "george_michael"
       expected: "george_michael"
            got: :george_michael (using ==)
       Diff:
       @@ -1,2 +1,2 @@
       -george_michael
       +:george_michael
     # ./spec/06_symbols_spec.rb:68:in `block (4 levels) in <top (required)>'

Finished in 0.03101 seconds
68 examples, 12 failures, 1 pending

Failed examples:

rspec ./spec/00_rspec_spec.rb:41 # The Rspec ruby gem Domain Specific Language alerts you when examples fail
rspec ./spec/01_assignment_spec.rb:123 # Variable when adding should be equal to the sum
rspec ./spec/01_assignment_spec.rb:135 # Variable when dividing/'modulosing' should be equal to the dividend
rspec ./spec/01_assignment_spec.rb:141 # Variable when dividing/'modulosing' should be equal to the the remainder
rspec ./spec/01_assignment_spec.rb:147 # Variable when dividing/'modulosing' should return an integer when using two integers
rspec ./spec/01_assignment_spec.rb:156 # Variable when dividing/'modulosing' should return a float when at least one number is a float
rspec ./spec/03_boolean_spec.rb:91 # Boolean failing tests true should be true
rspec ./spec/04_nil_spec.rb:24 # Nil and the NilClass faiing tests should be nil
rspec ./spec/05_strings_spec.rb:170 # Strings failing tests should insert the value into the string
rspec ./spec/05_strings_spec.rb:177 # Strings failing tests should perform calculations within the area escaped within the String
rspec ./spec/05_strings_spec.rb:183 # Strings failing tests should be equal to each other
rspec ./spec/06_symbols_spec.rb:62 # Symbols not quite a string, not yet a constant failing tests when I call to_s or place it in a String on the Symbol should be equal to a string
